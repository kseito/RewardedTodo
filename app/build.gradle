import dependencies.GradlePlugins
import dependencies.Libraries

plugins {
    alias libs.plugins.compose.compiler
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: "org.jlleitschuh.gradle.ktlint"
apply plugin: 'deploygate'

android {
    compileSdkVersion Versions.androidCompileSdkVersion

    defaultConfig {
        applicationId Packages.name
        minSdkVersion Versions.androidMinSdkVersion
        targetSdkVersion Versions.androidTargetSdkVersion
        versionCode Versions.versionCode
        versionName Versions.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "TODOIST_URL", "\"https://todoist.com\""
        buildConfigField "String", "REWARD_LIST_SERVER_URL", "\"https://rewardlist.herokuapp.com\""
    }

    signingConfigs {
        staging {
            storeFile rootProject.file("staging.keystore")
            storePassword System.getenv("STORE_PASSWORD")
            keyAlias System.getenv("KEY_ALIAS")
            keyPassword System.getenv("KEY_PASSWORD")
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }
        staging {
            signingConfig = signingConfigs.getByName("staging")
            applicationIdSuffix ".beta"
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlin {
        jvmToolchain(17)
    }
    packagingOptions {
        resources {
            excludes += [
                    'META-INF/LICENSE.txt',
                    'META-INF/todo_debug.kotlin_module',
                    'META-INF/reward_debug.kotlin_module',
                    'META-INF/auth_debug.kotlin_module',
                    'META-INF/metadata.kotlin_module',
                    'META-INF/metadata.jvm.kotlin_module',
                    'META-INF/kotlinx-metadata-jvm.kotlin_module',
                    'META-INF/elements.kotlin_module',
                    'META-INF/kotlinx-metadata.kotlin_module',
                    'META-INF/core.kotlin_module',
                    'META-INF/specs.kotlin_module',
                    'META-INF/gradle/incremental.annotation.processors'
            ]
        }
    }


    buildFeatures {
        dataBinding = true
        buildConfig = true
    }
    sourceSets {
        test.java.srcDirs += "src/test/kotlin"
    }
    namespace 'jp.kztproject.rewardedtodo'
}

dependencies {
    implementation libs.kotlin.stdlib

    implementation libs.activity.compose
    implementation Libraries.AndroidX.fragment
    implementation Libraries.AndroidX.design
    implementation Libraries.AndroidX.preference
    implementation Libraries.AndroidX.dataStore
    implementation Libraries.Stetho.stetho
    implementation Libraries.AndroidX.NavigationComponent.fragmentKtx
    implementation Libraries.AndroidX.NavigationComponent.uiKtx
    implementation Libraries.AndroidX.Security.crypto

    // Jetpack Compose
    implementation Libraries.AndroidX.Compose.foundation
    implementation Libraries.AndroidX.Compose.uiTooling
    implementation Libraries.AndroidX.Compose.material
    implementation Libraries.AndroidX.Compose.material3
    implementation Libraries.AndroidX.NavigationComponent.navigationCompose

    //Room
    implementation Libraries.AndroidX.Room.runtime
    annotationProcessor Libraries.AndroidX.Room.compiler
    kapt Libraries.AndroidX.Room.kaptCompiler

    //Dagger
    implementation Libraries.Dagger.core
    annotationProcessor Libraries.Dagger.compiler
    kapt Libraries.Dagger.compiler
    implementation Libraries.Dagger.hilt
    kapt Libraries.Dagger.hiltCompiler

    //Retrofit
    implementation Libraries.Retrofit.core
    implementation Libraries.Retrofit.gsonConverter
    implementation Libraries.Retrofit.coroutinesAdapter
    implementation Libraries.gson
    implementation Libraries.Retrofit.moshiConverter
    implementation Libraries.OkHttp.interceptor

    implementation Libraries.Moshi.moshi

    implementation project(path: ':feature:reward')
    implementation project(path: ':feature:auth')
    implementation project(path: ':common:kvs')

    //TODO I don`t know why this module is needed
    implementation project(path: ':feature:todo')
    implementation project(path: ':feature:setting')
    implementation project(path: ':data:todo')
    implementation project(path: ':data:ticket')
    implementation project(path: ':common:database')
    implementation project(path: ':domain:reward')
    implementation project(path: ':data:reward')
    implementation project(path: ':data:auth')
    implementation project(path: ':data:todoist')
    implementation project(path: ':application:reward')
    implementation project(path: ':application:todo')
    implementation project(path: ':domain:todo')
}

kapt {
    correctErrorTypes true
}

ktlint {
    version = GradlePlugins.Ktlint.version
    android = true
    reporters {
        reporter "checkstyle"
    }
    ignoreFailures = true
}

deploygate {
    appOwnerName = System.getenv("DEPLOY_GATE_OWENER_NAME")
    apiToken = System.getenv("DEPLOY_GATE_API_KEY")
}
