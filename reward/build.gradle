import dependencies.Libraries

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

apply from: rootProject.file('gradle/android_common.gradle')

android {

    defaultConfig {
        buildConfigField "String", "REWARD_LIST_SERVER_URL", "\"https://rewardlist.herokuapp.com\""
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
                jacoco.excludes = ['jdk.internal.*']
            }

            systemProperty "javax.net.ssl.trustStoreType", "JKS"
        }
    }

    buildFeatures {
        dataBinding = true
    }
    namespace 'project.seito.reward'
}

dependencies {
    implementation Libraries.Kotlin.stdlib

    //AndroidX
    implementation Libraries.AndroidX.appCompat
    implementation Libraries.AndroidX.design
    implementation Libraries.AndroidX.constraintLayout
    implementation Libraries.AndroidX.LifeCycle.viewModelKtx

    //Room
    implementation Libraries.AndroidX.Room.runtime
    implementation Libraries.AndroidX.Room.ktx
    annotationProcessor Libraries.AndroidX.Room.compiler
    kapt Libraries.AndroidX.Room.kaptCompiler

    //Test
    testImplementation Libraries.Test.junit
    testImplementation Libraries.Test.androidXCore
    testImplementation Libraries.Test.mockito
    testImplementation Libraries.Test.mockitoKotlin
    testImplementation Libraries.Test.coroutinesTest
    testImplementation Libraries.Test.mockWebServer
    testImplementation Libraries.Test.robolectric
    testImplementation Libraries.Test.assertJ
    testImplementation Libraries.Test.AndroidX.coreTesting
    testImplementation project(path: ':test:reward')

    androidTestImplementation Libraries.Test.AndroidX.testRunner
    androidTestImplementation Libraries.Test.AndroidX.espresso

    //UI
    implementation Libraries.bottomNavigation
    implementation Libraries.AndroidX.NavigationComponent.fragmentKtx
    implementation Libraries.AndroidX.NavigationComponent.uiKtx

    //Dagger
    implementation Libraries.Dagger.core
    annotationProcessor Libraries.Dagger.compiler
    kapt Libraries.Dagger.compiler

    //Retrofit
    implementation Libraries.Retrofit.core
    implementation Libraries.Retrofit.gsonConverter
    implementation Libraries.gson

    //Coroutines
    implementation Libraries.Kotlin.Coroutines.core
    implementation Libraries.Kotlin.Coroutines.android
    implementation Libraries.Kotlin.Coroutines.adapter

    implementation project(path: ':screen_transition')
    implementation project(path: ':common:database')
    implementation project(path: ':data:ticket')
    implementation project(path: ':domain:reward')
    implementation project(path: ':data:reward')
    implementation project(path: ':application:reward')
}
repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.3"
}
def coverageExcludeFiles = ['**/R.class',
                            '**/R$*.class',
                            '**/*Activity*.class',
                            '**/*Fragment*.class',
                            '**/databinding/*.*',
                            '**/com/android/**/*.*',
                            '**/BR.class',
                            '**/Dagger*Component.class',
                            '**/*_Factory.class'
]
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
        classDirectories.from = files(
                fileTree(
                        dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes/",
                        exclude: coverageExcludeFiles
                ) +
                        fileTree(
                                dir: "$buildDir/tmp/kotlin-classes/debug",
                                excludes: coverageExcludeFiles
                        )
        )
    }
    sourceDirectories.from = files(['src/main/java'])
    executionData.from = files "${buildDir}/jacoco/testDebugUnitTest.exec"
}
