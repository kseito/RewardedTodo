apply plugin: 'com.android.library'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "REWARD_LIST_SERVER_URL", "\"https://rewardlist.herokuapp.com\""
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation 'com.google.android.material:material:1.0.0'

    //Test
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.1.0"
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.1.1'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
    testImplementation "org.robolectric:robolectric:3.5.1"
    testImplementation 'org.assertj:assertj-core:3.9.1'
    androidTestImplementation 'androidx.test:runner:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.0'

    //UI
    implementation 'info.hoang8f:fbutton:1.0.5'
    kapt "androidx.databinding:databinding-compiler:$gradle_plugin_version"
    implementation 'com.aurelhubert:ahbottomnavigation:2.1.0'

    //Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    annotationProcessor "com.google.dagger:dagger-android-processor:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    //API
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation 'com.google.code.gson:gson:2.8.2'

    //AAC
    implementation 'androidx.lifecycle:lifecycle-extensions:2.0.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel:2.0.0'
    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    //Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutines_version"
    implementation "com.jakewharton.retrofit:retrofit2-kotlin-coroutines-adapter:$rx_coroutines_adapter_version"

    implementation project(path: ':screen_transition')
}
repositories {
    mavenCentral()
}

jacoco {
    toolVersion = "0.8.3"
}
def coverageExcludeFiles = ['**/R.class',
                            '**/R$*.class',
                            '**/*Activity*.class',
                            '**/*Fragment*.class',
                            '**/databinding/*.*',
                            '**/com/android/**/*.*',
                            '**/BR.class',
                            '**/Dagger*Component.class',
                            '**/*_Factory.class'
]
task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest']) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled true
        html.enabled true
        csv.enabled false
        xml.destination file("${buildDir}/reports/jacoco/jacocoTestReport.xml")
        html.destination file("${buildDir}/reports/jacoco/html")
        classDirectories = files(
                fileTree(
                        dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes/",
                        exclude: coverageExcludeFiles
                ) +
                        fileTree(
                                dir: "$buildDir/tmp/kotlin-classes/debug",
                                excludes: coverageExcludeFiles
                        )
        )
    }
    sourceDirectories = files(['src/main/java'])
    executionData = files "${buildDir}/jacoco/testDebugUnitTest.exec"
}
